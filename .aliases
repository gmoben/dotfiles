#!/bin/bash
# -*- mode: shell-script -*-

# alias npm='noglob npm'

# # Vagrant
# function vagrant() {
#     if [[ $1 == "remake" ]]; then
#         shift $((2 > $# ? $# : 2))
#         command vagrant destroy -f "$@" && vagrant up "$@" && vagrant ssh "$@"
#     else
#         command vagrant "$@"
#     fi
# }

# alias vsh='vagrant ssh'
# alias vup='vagrant up'
# alias vhalt='vagrant halt'
# alias vrl='vagrant reload'
# alias vrm='vagrant destroy'
# alias vrb='vagrant rebuild'

# Confirm before overwriting something
alias cp="cp -i"

# Docker
alias dlogs='docker logs'
alias dps='docker ps'
alias dclobber='docker stop `docker ps -qa` && docker rm `docker ps -qa`'
alias dclob="dclobber"

# Pass correct $TERM to emacs and tmux
term=xterm-24bit

# Emacs
alias emacs="TERM=$term emacs -nw"
alias gmacs="TERM=$term emacs -c"
alias emacsd="TERM=$term emacs --daemon"
alias emacsc="TERM=$term emacsclient -t"
alias tmuxconf="TERM=$term emacsclient -t $HOME/.tmux.conf"
alias emacsconf="TERM=$term emacsclient -t $HOME/.emacs.conf"
alias e="TERM=$term emacsclient -t ."
alias ecode="TERM=$term emacsclient -t /code"
alias ehome="TERM=$term emacsclient -t $HOME"

# Tmux
export TMUX_DEFAULT_SESSION_GROUP=${TMUX_DEFAULT_SESSION_GROUP:-"main"}
TMUX_PATH=`which -a tmux | grep -v alias | grep bin/tmux | head -1`
alias tmux="TERM=$term $TMUX_PATH"

function tma() {
    echo "Deprecated. Use 'tmn [session_group]' instead. Default session_group: $TMUX_DEFAULT_SESSION_GROUP"
    tmn $@
}

function tmn() {
    local session_group=${1:-$TMUX_DEFAULT_SESSION_GROUP}
    local root_session_name="$session_group (root)"

    # Create a detached root session that will persist without any attached clients.
    # This preserves the windows even if we detach from all child clients.
    if [[ ! `tmux has-session -t $root_session_name` ]]; then
        tmux new-session -d -s $root_session_name -t $session_group &>/dev/null
    fi

    # Count the existing sessions (i.e. currently attached terminals) and build new session name
    local session_count=`tmux_session_count $session_group`
    local new_session_name="$session_group-$((session_count - 1))"

    # Start children sessions with destroy-unattached
    tmux new-session -s "$new_session_name" -t $session_group \; set-option destroy-unattached
}

function tmux_session_count() {
    local session_group=${1:-$TMUX_DEFAULT_SESSION_GROUP}
    tmux list-sessions -F "#{session_group}" | grep "$session_group" | wc -l
}

alias tmk="tmux kill-session -t"
alias tml="tmux list-sessions"

# Tmuxinator
alias mux="tmuxinator"
alias muxs="tmuxinator start"
alias muxq="tmuxinator stop"

# Git
alias gpo="git pull origin"
alias gpu="git pull upstream"
alias gcm="git commit -m"

# Utils

if [[ "$OSTYPE" == "darwin"* ]]; then
    alias _ls="/bin/ls"
    alias ls="ls -G -Flah"
elif [[ "$OSTYPE" == "linux-gnu" ]]; then
    alias _ls="ls"
    alias ls="ls --color=auto -Flah"
else
    echo "Unknown OSTYPE $OSTYPE"
    exit 1
fi

alias psg="ps -ef | grep "
alias diff-files="git diff --no-index"
# Expand aliases after using sudo
alias sudo="sudo "

# pywal
if [ `command -v wal-set` ]; then
    alias wsp="wal-set ~/Pictures"
    alias wsw="wal-set ~/Pictures/wallpaper"
fi

if [[ "$OSTYPE" == "linux-gnu" ]]; then
   # Xscreensaver
   alias locks="xscreensaver-command --lock"

   # Systemd
   alias sc="systemctl"
   alias scr="systemctl restart"
   alias scstat="systemctl status"
   alias scstart="systemctl start"
   alias scstop="systemctl stop"
   alias sce="systemctl enable"
   alias scd="systemctl disable"
   alias scen="systemctl enable --now"
   alias scdn="systemctl disable --now"

   alias scu="systemctl --user"
   alias scur="systemctl --user restart"
   alias scus="systemctl --user status"
   alias scuon="systemctl --user start"
   alias scuoff="systemctl --user stop"
   alias scue="systemctl --user enable"
   alias scuen="systemctl --user enable --now"
   alias scud="systemctl --user disable"
   alias scudn="systemctl --user disable --now"
fi

# Kubectl
alias kg="kubectl get"
alias kgp="kubectl get pods"
alias kgn="kubectl get namespaces"
alias kc="kubectl"
alias kgc="kubectl config get-context"
alias ksc="kubectl config set-context"
alias kuc="kubectl config use-context"
alias kdd="kubectl describe deployment"
alias kdp="kubectl describe pod"
alias kd="kubectl describe"
alias kl="kubectl logs"
alias klf="kubectl logs --follow"
alias kxit="kubectl exec -it"

function kgpl() {
    if [[ $# = 1 ]]; then
        index=*
        selector=$@
    elif [[ $# = 2 && $2 =~ ^[0-9]+$ ]]; then
        index=$2
        selector=${@:1:1}
    else
        echo "Usage: kgpl [label_selector] ([pod index])"
        exit 1
    fi

    command kubectl get pods -o=jsonpath="{.items[${index}].metadata.name}" -l $selector
}

function kllabel() {
    if [[ $# = 1 ]]; then
        args=$@
        args+=(0)
    else
        args=$@
    fi
    command kubectl logs `kgpl ${args}`
}

function klfl() {
    if [[ $# = 1 ]]; then
        args=$@
        args+=(0)
    else
        args=$@
    fi
    command kubectl logs --follow `kgpl ${args}`
}

# Docker

# GPG
alias gpgtty="echo UPDATESTARTUPTTY | gpg-connect-agent"
alias gpgesa="gpg --encrypt --sign --armor"
alias gpgtome="gpgesa -r ben@warr.io"

# Bookmarks
alias org="cd /code/org && emacsc ."
alias ben="cd /code/ben && emacsc ."
alias ext="cd /code/ext && emacsc ."
alias notes="cd /code/ben/notes && emacsc ."
alias dotfiles="cd /code/ben/dotfiles && emacsc ."

# Quick sourcing
alias srcz="source $HOME/.zshrc"

# Quick clone
alias gcext="cd /code/ext && git clone"
alias gcben="cd /code/ben && git clone"

# CLI timers
if [[ `command -v termdown` && `command -v play` ]]; then
function raidtimer() {
    if [[ -z "$1" ]]; then
        echo "Usage: raidtimer HH:MM|SECONDS [MSG]"
    fi
    local msg=${2-"Raid time!"}
    local sound=${3-/code/ben/dotfiles/audio/chinpokomon.wav}
    termdown $1 && notify-send "$msg" && echo "$msg" && play -q $sound &>/dev/null
}
fi

function woman() {
    if [[ -z "$1" ]]; then
        echo "Usage: woman MANPAGE"
    fi
    if ! man -f $1 2>/dev/null; then
        echo "No manpage for $1"
    else
        emacsclient -c -e '(woman "'"$1"'")'
    fi
}

# Work/Local aliases
[[ -f $HOME/.work.aliases ]] && source $HOME/.work.aliases
[[ -f $HOME/.extend.aliases ]] && source $HOME/.extend.aliases
